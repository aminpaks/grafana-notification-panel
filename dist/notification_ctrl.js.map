{"version":3,"sources":["../src/notification_ctrl.js"],"names":["MetricsPanelCtrl","TimeSeries","_","NotificationCtrl","$scope","$injector","$rootScope","templateSrv","panelDefaults","links","datasource","autoHide","autoHideTimeout","valueName","thresholds","nullPointMode","defaults","panel","events","on","onRender","bind","onDataReceived","onInitEditMode","onDataError","content","Notification","permission","requestPermission","addEditorTab","err","dataList","console","log","series","map","seriesHandler","data","setValues","render","split","strValue","Number","trim","value","editMode","settings","notify","seriesData","datapoints","alias","target","flotpairs","getFlotPairs","message","body","defaultSettings","icon","onshow","setTimeout","close","length","error","Error","JSON","stringify","lastPoint","last","lastValue","isArray","valueRounded","valueFormated","isString","escape","stats","scopedVars","__name","label","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACIA,4B,kBAAAA,gB;;AAEGC,sB;;AACAC,a;;;;;;;;;;;;;;;;;;;;;wCAEDC,gB;;;AAEF;AACA,0CAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,UAA/B,EAA2CC,WAA3C,EAAwD;AAAA;;AAAA,oJAC9CH,MAD8C,EACtCC,SADsC;;AAGpD,0BAAKC,UAAL,GAAkBA,UAAlB;AACA,0BAAKC,WAAL,GAAmBA,WAAnB;;AAEA,wBAAIC,gBAAgB;AAChBC,+BAAO,EADS;AAEhBC,oCAAY,IAFI;AAGhBC,kCAAU,KAHM;AAIhBC,yCAAiB,IAJD;AAKhBC,mCAAW,KALK;AAMhBC,oCAAY,EANI;AAOhBC,uCAAe;AAPC,qBAApB;;AAUAb,sBAAEc,QAAF,CAAW,MAAKC,KAAhB,EAAuBT,aAAvB;;AAEA,0BAAKU,MAAL,CAAYC,EAAZ,CAAe,QAAf,EAAyB,MAAKC,QAAL,CAAcC,IAAd,OAAzB;AACA,0BAAKH,MAAL,CAAYC,EAAZ,CAAe,eAAf,EAAgC,MAAKG,cAAL,CAAoBD,IAApB,OAAhC;AACA,0BAAKH,MAAL,CAAYC,EAAZ,CAAe,oBAAf,EAAqC,MAAKG,cAAL,CAAoBD,IAApB,OAArC;AACA,0BAAKH,MAAL,CAAYC,EAAZ,CAAe,gBAAf,EAAiC,MAAKI,cAAL,CAAoBF,IAApB,OAAjC;AACA,0BAAKH,MAAL,CAAYC,EAAZ,CAAe,YAAf,EAA6B,MAAKK,WAAL,CAAiBH,IAAjB,OAA7B;;AAEA,0BAAKI,OAAL,GAAe,YAAf;;AAEA,wBAAI,CAACC,YAAL,EAAmB;AACf,8BAAKD,OAAL,GAAe,2CAAf;AACH,qBAFD,MAGA,IAAIC,aAAaC,UAAb,IAA2B,SAA/B,EAA0C;AACtCD,qCAAaE,iBAAb;AACH;AA/BmD;AAgCvD;;;;qDAEgB;AACb,6BAAKC,YAAL,CAAkB,SAAlB,EAA6B,wDAA7B,EAAuF,CAAvF;AACH;;;gDAEWC,G,EAAK;AACb,6BAAKR,cAAL,CAAoB,EAApB;AACH;;;mDAEcS,Q,EAAU;AACrBC,gCAAQC,GAAR,CAAY,iCAAZ;;AAEA;AACA,6BAAKC,MAAL,GAAcH,SAASI,GAAT,CAAa,KAAKC,aAAL,CAAmBf,IAAnB,CAAwB,IAAxB,CAAb,CAAd;;AAEA;AACA,6BAAKgB,IAAL,GAAY,KAAKC,SAAL,CAAe,KAAKJ,MAApB,CAAZ;;AAEA;AACA,6BAAKK,MAAL;AACH;;;+CAEU;AACPP,gCAAQC,GAAR,CAAY,2BAAZ;;AAEA,4BAAI,CAAC,KAAKI,IAAV,EAAgB;AACZ;AACH;;AAED,4BAAIA,OAAO,KAAKA,IAAhB;;AAEAA,6BAAKvB,UAAL,GAAkB,KAAKG,KAAL,CAAWH,UAAX,CAAsB0B,KAAtB,CAA4B,GAA5B,EAAiCL,GAAjC,CAAqC,UAASM,QAAT,EAAmB;AACtE,mCAAOC,OAAOD,SAASE,IAAT,EAAP,CAAP;AACH,yBAFiB,CAAlB;;AAIA,6BAAKlB,OAAL,GAAeY,KAAKO,KAApB;;AAEA;AACA,4BAAI,CAAC,KAAKC,QAAV,EAAoB;;AAEhB;AACA,gCAAIR,KAAKO,KAAL,GAAa,CAAjB,EAAoB;;AAGhB,oCAAIE,WAAW;AACXnC,8CAAU,KAAKM,KAAL,CAAWN,QAAX,IAAuB,KAAKM,KAAL,CAAWL;AADjC,iCAAf;;AAIA;AACA,qCAAKmC,MAAL,CAAY,qBAAZ,EAAmC,EAAnC,EAAuCD,QAAvC;AACH;AACJ;AACJ;;;kDAEaE,U,EAAY;AACtBhB,gCAAQC,GAAR,CAAY,gCAAZ;AACA,4BAAIC,SAAS,IAAIjC,UAAJ,CAAe;AACxBgD,wCAAYD,WAAWC,UADC;AAExBC,mCAAOF,WAAWG;AAFM,yBAAf,CAAb;;AAKAjB,+BAAOkB,SAAP,GAAmBlB,OAAOmB,YAAP,CAAoB,KAAKpC,KAAL,CAAWF,aAA/B,CAAnB;AACA,+BAAOmB,MAAP;AACH;;;2CAEMoB,O,EAASC,I,EAAMT,Q,EAAU;AAC5B,4BAAIU,kBAAkB;AAClB;AACA;AACAC,kCAAM;AAHY,yBAAtB;;AAMAvD,0BAAEc,QAAF,CAAW8B,QAAX,EAAqBU,eAArB;;AAEA,4BAAIT,MAAJ;AACA,4BAAInC,kBAAkBkC,SAASnC,QAA/B;AACA,4BAAI+C,SAAS,SAATA,MAAS,GAAW;AACpBC,uCAAW,YAAW;;AAElBZ,uCAAOa,KAAP;AAEH,6BAJD,EAIGhD,eAJH;AAKH,yBAND;;AAQA,+BAAOkC,SAAS,UAAT,CAAP;;AAEAC,iCAAS,IAAIrB,YAAJ,CAAiB4B,OAAjB,EAA0BR,QAA1B,CAAT;AACAC,+BAAOW,MAAP,GAAgBA,MAAhB;;AAEA,+BAAOX,MAAP;AACH;;;8CAESb,M,EAAQ;AACd,4BAAIG,OAAO,EAAX;AACA,4BAAIH,OAAO2B,MAAP,GAAgB,CAApB,EAAuB;AACnB,gCAAIC,QAAQ,IAAIC,KAAJ,EAAZ;AACAD,kCAAMR,OAAN,GAAgB,uBAAhB;AACAQ,kCAAMzB,IAAN,GAAa,0BAA0BH,OAAO2B,MAAjC,GACT,oEADS,GAC8DG,KAAKC,SAAL,CAAe/B,MAAf,CAD3E;AAEA,kCAAM4B,KAAN;AACH;;AAED,4BAAI5B,UAAUA,OAAO2B,MAAP,GAAgB,CAA9B,EAAiC;AAC7B,gCAAIK,YAAYhE,EAAEiE,IAAF,CAAOjC,OAAO,CAAP,EAAUe,UAAjB,CAAhB;AACA,gCAAImB,YAAYlE,EAAEmE,OAAF,CAAUH,SAAV,IAAuBA,UAAU,CAAV,CAAvB,GAAsC,IAAtD;;AAEA,gCAAI,KAAKjD,KAAL,CAAWJ,SAAX,KAAyB,MAA7B,EAAqC;AACjCwB,qCAAKO,KAAL,GAAa,CAAb;AACAP,qCAAKiC,YAAL,GAAoB,CAApB;AACAjC,qCAAKkC,aAAL,GAAqBrC,OAAO,CAAP,EAAUgB,KAA/B;AACH,6BAJD,MAIO,IAAIhD,EAAEsE,QAAF,CAAWJ,SAAX,CAAJ,EAA2B;AAC9B/B,qCAAKO,KAAL,GAAa,CAAb;AACAP,qCAAKkC,aAAL,GAAqBrE,EAAEuE,MAAF,CAASL,SAAT,CAArB;AACA/B,qCAAKiC,YAAL,GAAoB,CAApB;AACH,6BAJM,MAIA;AACHjC,qCAAKO,KAAL,GAAaV,OAAO,CAAP,EAAUwC,KAAV,CAAgB,KAAKzD,KAAL,CAAWJ,SAA3B,CAAb;AACAwB,qCAAKe,SAAL,GAAiBlB,OAAO,CAAP,EAAUkB,SAA3B;;AAEA;AACA;AACA;AACA;AACH;;AAED;AACAf,iCAAKsC,UAAL,GAAkB;AACdC,wCAAQ;AACJhC,2CAAOV,OAAO,CAAP,EAAU2C;AADb;AADM,6BAAlB;AAKH;;AAED7C,gCAAQC,GAAR,CAAYiC,SAAZ,EAAuBE,SAAvB,EAAkC/B,IAAlC,EAAwCH,OAAO,CAAP,EAAUwC,KAAlD;;AAEA,+BAAOrC,IAAP;AACH;;;;cA3K0BrC,gB;;AAkL/BG,6BAAiB2E,WAAjB,GAA+B,aAA/B;;wCAGI3E,gB","file":"notification_ctrl.js","sourcesContent":["import {\n    MetricsPanelCtrl\n} from 'app/plugins/sdk';\nimport TimeSeries from 'app/core/time_series';\nimport _ from 'lodash';\n\nclass NotificationCtrl extends MetricsPanelCtrl {\n\n    /** @ngInject */\n    constructor($scope, $injector, $rootScope, templateSrv) {\n        super($scope, $injector);\n\n        this.$rootScope = $rootScope;\n        this.templateSrv = templateSrv;\n\n        var panelDefaults = {\n            links: [],\n            datasource: null,\n            autoHide: false,\n            autoHideTimeout: 5000,\n            valueName: 'avg',\n            thresholds: '',\n            nullPointMode: 'connected',\n        };\n\n        _.defaults(this.panel, panelDefaults);\n\n        this.events.on('render', this.onRender.bind(this));\n        this.events.on('data-received', this.onDataReceived.bind(this));\n        this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n        this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n        this.events.on('data-error', this.onDataError.bind(this));\n\n        this.content = 'Loading...';\n\n        if (!Notification) {\n            this.content = 'Your browser doesn\\' support notification';\n        } else\n        if (Notification.permission != 'granted') {\n            Notification.requestPermission();\n        }\n    }\n\n    onInitEditMode() {\n        this.addEditorTab('Options', 'public/plugins/aminpaks-notification-panel/editor.html', 2);\n    }\n\n    onDataError(err) {\n        this.onDataReceived([]);\n    }\n\n    onDataReceived(dataList) {\n        console.log('NotificationCtrl.onDataReceived');\n\n        // Receives data make the series\n        this.series = dataList.map(this.seriesHandler.bind(this));\n\n        // Refines values\n        this.data = this.setValues(this.series);\n\n        // Render components\n        this.render();\n    }\n\n    onRender() {\n        console.log('NotificationCtrl.onRender');\n\n        if (!this.data) {\n            return;\n        }\n\n        var data = this.data;\n\n        data.thresholds = this.panel.thresholds.split(',').map(function(strValue) {\n            return Number(strValue.trim());\n        });\n\n        this.content = data.value;\n\n        // Only instiantiate when it's not in EditMode.\n        if (!this.editMode) {\n\n            // Checks if the value is within thresholds\n            if (data.value > 0) {\n\n\n                var settings = {\n                    autoHide: this.panel.autoHide && this.panel.autoHideTimeout,\n                }\n\n                // Notifies the user\n                this.notify('The value exceeded!', '', settings);\n            }\n        }\n    }\n\n    seriesHandler(seriesData) {\n        console.log('NotificationCtrl.seriesHandler');\n        var series = new TimeSeries({\n            datapoints: seriesData.datapoints,\n            alias: seriesData.target\n        });\n\n        series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n        return series;\n    }\n\n    notify(message, body, settings) {\n        var defaultSettings = {\n            // tag: null,\n            // body: body,\n            icon: 'public/plugins/aminpaks-notification-panel/img/exclamation.png',\n        };\n\n        _.defaults(settings, defaultSettings);\n\n        var notify;\n        var autoHideTimeout = settings.autoHide;\n        var onshow = function() {\n            setTimeout(function() {\n\n                notify.close();\n\n            }, autoHideTimeout);\n        };\n\n        delete settings['autoHide'];\n\n        notify = new Notification(message, settings);\n        notify.onshow = onshow;\n\n        return notify;\n    }\n\n    setValues(series) {\n        var data = {}\n        if (series.length > 1) {\n            var error = new Error();\n            error.message = 'Multiple Series Error';\n            error.data = 'Metric query returns ' + series.length +\n                ' series. Single Stat Panel expects a single series.\\n\\nResponse:\\n' + JSON.stringify(series);\n            throw error;\n        }\n\n        if (series && series.length > 0) {\n            var lastPoint = _.last(series[0].datapoints);\n            var lastValue = _.isArray(lastPoint) ? lastPoint[0] : null;\n\n            if (this.panel.valueName === 'name') {\n                data.value = 0;\n                data.valueRounded = 0;\n                data.valueFormated = series[0].alias;\n            } else if (_.isString(lastValue)) {\n                data.value = 0;\n                data.valueFormated = _.escape(lastValue);\n                data.valueRounded = 0;\n            } else {\n                data.value = series[0].stats[this.panel.valueName];\n                data.flotpairs = series[0].flotpairs;\n\n                // var decimalInfo = this.getDecimalsForValue(data.value);\n                // var formatFunc = kbn.valueFormats[this.panel.format];\n                // data.valueFormated = formatFunc(data.value, decimalInfo.decimals, decimalInfo.scaledDecimals);\n                // data.valueRounded = kbn.roundValue(data.value, decimalInfo.decimals);\n            }\n\n            // Add $__name variable for using in prefix or postfix\n            data.scopedVars = {\n                __name: {\n                    value: series[0].label\n                }\n            };\n        }\n\n        console.log(lastPoint, lastValue, data, series[0].stats);\n\n        return data;\n    }\n\n    // link(scope, elem, attrs, ctrl) {\n    //     console.log(ctrl);\n    // }\n}\n\nNotificationCtrl.templateUrl = 'module.html';\n\nexport {\n    NotificationCtrl\n};\n"]}